/**
 * Project Euler: Problem 2: Even Fibonacci Numbers
 * Each new term in the Fibonacci sequence is generated by adding  the previous two terms. By starting with 1 and 2, the first 10  terms will be:

 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *By considering the terms in the Fibonacci sequence that do not exceed the nth term, find the sum of the even-valued terms.
 */

function fiboEvenSum(n) {
  // You can do it!

  let fib_numbers = []
  // Initialize array with placeholders
  fib_numbers.push(0)
  fib_numbers.push(1)
  for (let i = 1; i <= n; i++) {
    // Add the last two elements of array, then push it to the end
    const f = fib_numbers.slice(-2)[1] + fib_numbers.slice(-2)[0]
    fib_numbers.push(f)
  }
  // Remove the first two elements
  fib_numbers = fib_numbers.slice(n * -1)

  //filter array for even numbers then sum
  const evenSum = fib_numbers
    .filter(fib_num => {
      return fib_num % 2 === 0
    })
    .reduce((acc, even_fib) => {
      return acc + even_fib
    }, 0)
  // console.log(evenSum)
  return evenSum
}

fiboEvenSum(43)

/*
fiboEvenSum(10) should return 44.
fiboEvenSum(18) should return 3382.
fiboEvenSum(23) should return 60696.
fiboEvenSum(43) should return 350704366.
Your function should return an even value.
*/
